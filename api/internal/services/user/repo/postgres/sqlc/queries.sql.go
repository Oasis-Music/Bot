// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const getUser = `-- name: GetUser :one
SELECT
    u.user_id,
    u.first_name,
    u.last_name,
    u.tg_username,
    u.language_code,
    u.tg_photo_url,
    u.tg_premium,
    ur.role_name,
    u.online_at,
    u.created_at,
    u.updated_at
FROM users u
INNER JOIN user_role ur ON u.role_id = ur.role_id WHERE u.user_id = $1
`

type GetUserRow struct {
	UserID       int64
	FirstName    string
	LastName     sql.NullString
	TgUsername   sql.NullString
	LanguageCode sql.NullString
	TgPhotoUrl   sql.NullString
	TgPremium    bool
	RoleName     string
	OnlineAt     time.Time
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) GetUser(ctx context.Context, userID int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.TgUsername,
		&i.LanguageCode,
		&i.TgPhotoUrl,
		&i.TgPremium,
		&i.RoleName,
		&i.OnlineAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
