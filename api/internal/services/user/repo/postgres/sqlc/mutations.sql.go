// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: mutations.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_id,
  first_name,
  last_name,
  tg_username,
  language_code,
  tg_photo_url,
  tg_premium,
  role_id
) VALUES($1, $2, $3, $4, $5, $6, $7, $8) RETURNING user_id, first_name
`

type CreateUserParams struct {
	UserID       int64
	FirstName    string
	LastName     sql.NullString
	TgUsername   sql.NullString
	LanguageCode sql.NullString
	TgPhotoUrl   sql.NullString
	TgPremium    bool
	RoleID       int32
}

type CreateUserRow struct {
	UserID    int64
	FirstName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.TgUsername,
		arg.LanguageCode,
		arg.TgPhotoUrl,
		arg.TgPremium,
		arg.RoleID,
	)
	var i CreateUserRow
	err := row.Scan(&i.UserID, &i.FirstName)
	return i, err
}
