// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: mutations.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSoundtrack = `-- name: CreateSoundtrack :one
INSERT INTO soundtrack (
    title,
    author,
    duration,
    cover_image,
    audio_file,
    creator_id
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id
`

type CreateSoundtrackParams struct {
	Title      string
	Author     string
	Duration   int16
	CoverImage sql.NullString
	AudioFile  string
	CreatorID  int64
}

func (q *Queries) CreateSoundtrack(ctx context.Context, arg CreateSoundtrackParams) (int64, error) {
	row := q.db.QueryRow(ctx, createSoundtrack,
		arg.Title,
		arg.Author,
		arg.Duration,
		arg.CoverImage,
		arg.AudioFile,
		arg.CreatorID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteSoundtrack = `-- name: DeleteSoundtrack :execrows
DELETE FROM soundtrack WHERE id = $1
`

func (q *Queries) DeleteSoundtrack(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSoundtrack, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const saveSoundtrackHash = `-- name: SaveSoundtrackHash :exec
INSERT INTO soundtrack_hash (hash, soundtrack_id) VALUES ($1, $2)
`

type SaveSoundtrackHashParams struct {
	Hash         string
	SoundtrackID int64
}

func (q *Queries) SaveSoundtrackHash(ctx context.Context, arg SaveSoundtrackHashParams) error {
	_, err := q.db.Exec(ctx, saveSoundtrackHash, arg.Hash, arg.SoundtrackID)
	return err
}
