type Soundtrack {
  id: ID!
  title: String!
  author: String!
  duration: Int!
  coverURL: String
  audioURL: String!
  validated: Boolean!
  creatorId: String! @hasRole(role: ADMIN)
  creator: User!
  createdAt: Date!
  attached: Boolean!
}

union SoundtrackResult = Soundtrack | NotFound # todo: del then
union SoundtrackPayload = Soundtrack | NotFound

extend type Query {
  soundtrack(id: ID!): SoundtrackPayload @hasRole(role: [ADMIN, USER])
  soundtracks(filter: SoundtracksFilter!): SoundtracksResponse! @hasRole(role: [ADMIN, USER])
  searchSoundtrack(value: String!): [Soundtrack!]! @hasRole(role: [ADMIN, USER])
  checkAudioHash(hash: String!): SoundtrackResult @hasRole(role: [ADMIN, USER])
}

extend type Mutation {
  createSoundtrack(input: CreateSoundtrackInput!): Boolean! @hasRole(role: [ADMIN, USER])
  deleteSoundtrack(id: ID!): Boolean! @hasRole(role: [ADMIN])
}

input SoundtracksFilter {
  page: Int!
}

type SoundtracksResponse {
  soundtracks: [Soundtrack!]!
}

input CreateSoundtrackInput {
  title: String!
  author: String!
  coverImage: Upload
  audiofile: Upload!
  attach: Boolean!
}
