type User {
  id: ID!
  firstName: String!
  lastName: String
  username: String
  languageCode: String
  role: String!
  visitedAt: Date!
  createdAt: Date!
}

union UserResult = User | NotFound
union UserSoundtracksResult = UserSoundtracksResponse | NotFound

extend type Query {
  user(id: ID!): UserResult @hasRole(role: ADMIN)
  authorizeUser(initData: String!): AuthorizationResponse!
  userSoundtracks(id: ID!, filter: UserSoundtracksFilter!): UserSoundtracksResult! @hasRole(role: [USER, ADMIN])
}

extend type Mutation {
  attachSoundtrack(input: AttachSoundtrackInput!): Boolean! @hasRole(role: [USER, ADMIN])
  unattachSoundtrack(input: UnattachSoundtrackInput!): Boolean! @hasRole(role: [USER, ADMIN])
}

input UserSoundtracksFilter {
  page: Int!
}

type UserSoundtracksResponse {
  total: Int!
  soundtracks: [Soundtrack!]!
}

input AttachSoundtrackInput {
  userId: String!
  trackId: String!
}

input UnattachSoundtrackInput {
  userId: ID!
  trackId: ID!
}

type AuthorizationResponse {
  token: String!
  refreshToken: String!
}
