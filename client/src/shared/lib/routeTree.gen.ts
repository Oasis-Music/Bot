/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../../pages/routes/__root'
import { Route as UploadImport } from './../../pages/routes/upload'
import { Route as UiImport } from './../../pages/routes/ui'
import { Route as TermsImport } from './../../pages/routes/terms'
import { Route as SettingsImport } from './../../pages/routes/settings'
import { Route as ExploreImport } from './../../pages/routes/explore'
import { Route as AuthImport } from './../../pages/routes/auth'
import { Route as IndexImport } from './../../pages/routes/index'

// Create/Update Routes

const UploadRoute = UploadImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRoute,
} as any)

const UiRoute = UiImport.update({
  id: '/ui',
  path: '/ui',
  getParentRoute: () => rootRoute,
} as any)

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ExploreRoute = ExploreImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/ui': {
      id: '/ui'
      path: '/ui'
      fullPath: '/ui'
      preLoaderRoute: typeof UiImport
      parentRoute: typeof rootRoute
    }
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/explore': typeof ExploreRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
  '/ui': typeof UiRoute
  '/upload': typeof UploadRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/explore': typeof ExploreRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
  '/ui': typeof UiRoute
  '/upload': typeof UploadRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/explore': typeof ExploreRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
  '/ui': typeof UiRoute
  '/upload': typeof UploadRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/explore'
    | '/settings'
    | '/terms'
    | '/ui'
    | '/upload'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/explore' | '/settings' | '/terms' | '/ui' | '/upload'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/explore'
    | '/settings'
    | '/terms'
    | '/ui'
    | '/upload'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  ExploreRoute: typeof ExploreRoute
  SettingsRoute: typeof SettingsRoute
  TermsRoute: typeof TermsRoute
  UiRoute: typeof UiRoute
  UploadRoute: typeof UploadRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  ExploreRoute: ExploreRoute,
  SettingsRoute: SettingsRoute,
  TermsRoute: TermsRoute,
  UiRoute: UiRoute,
  UploadRoute: UploadRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/explore",
        "/settings",
        "/terms",
        "/ui",
        "/upload"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/explore": {
      "filePath": "explore.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/ui": {
      "filePath": "ui.tsx"
    },
    "/upload": {
      "filePath": "upload.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
