directive @hasRole(role: [Role!]!) on FIELD_DEFINITION | MUTATION | QUERY

"""
The @specifiedBy built-in directive is used within the type system definition
language to provide a scalar specification URL for specifying the behavior of
custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input AttachSoundtrackInput {
  userId: String!
  trackId: String!
}

type AuthorizationResponse {
  token: String!
  refreshToken: String!
}

input CreateSoundtrackInput {
  title: String!
  author: String!
  coverImage: Upload
  audiofile: Upload!
}

scalar Date

type Mutation {
  createSoundtrack(input: CreateSoundtrackInput!): Boolean!
  deleteSoundtrack(id: ID!): Boolean!
  attachSoundtrack(input: AttachSoundtrackInput!): Boolean!
  unattachSoundtrack(input: UnattachSoundtrackInput!): Boolean!
}

type NotFound {
  message: String!
}

type Query {
  soundtrack(id: ID!): SoundtrackResult
  soundtracks(filter: SoundtracksFilter!): SoundtracksResponse!
  soundtrackByTitle(title: String!): [Soundtrack!]!
  user(id: ID!): UserResult
  authorizeUser(initData: String!): AuthorizationResponse!
  userSoundtracks(id: ID!, filter: UserSoundtracksFilter!): UserSoundtracksResult!
}

enum Role {
  ADMIN
  USER
}

type Soundtrack {
  id: ID!
  title: String!
  author: String!
  duration: Int!
  coverURL: String
  audioURL: String!
  validated: Boolean!
  creatorId: String!
  createdAt: Date!
  attached: Boolean!
}

union SoundtrackResult = Soundtrack | NotFound

input SoundtracksFilter {
  page: Int!
}

type SoundtracksResponse {
  soundtracks: [Soundtrack!]!
}

input UnattachSoundtrackInput {
  userId: ID!
  trackId: ID!
}

scalar Upload

type User {
  id: ID!
  firstName: String!
  lastName: String
  username: String
  languageCode: String
  role: String!
  visitedAt: Date!
  createdAt: Date!
}

union UserResult = User | NotFound

input UserSoundtracksFilter {
  page: Int!
}

type UserSoundtracksResponse {
  total: Int!
  soundtracks: [Soundtrack!]!
}

union UserSoundtracksResult = UserSoundtracksResponse | NotFound
